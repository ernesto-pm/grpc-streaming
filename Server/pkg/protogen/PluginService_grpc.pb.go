// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: PluginService.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteDefinitionClient is the client API for RouteDefinition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteDefinitionClient interface {
	StreamHello(ctx context.Context, in *StreamHelloRequest, opts ...grpc.CallOption) (RouteDefinition_StreamHelloClient, error)
}

type routeDefinitionClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteDefinitionClient(cc grpc.ClientConnInterface) RouteDefinitionClient {
	return &routeDefinitionClient{cc}
}

func (c *routeDefinitionClient) StreamHello(ctx context.Context, in *StreamHelloRequest, opts ...grpc.CallOption) (RouteDefinition_StreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteDefinition_ServiceDesc.Streams[0], "/pluginService.RouteDefinition/StreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeDefinitionStreamHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteDefinition_StreamHelloClient interface {
	Recv() (*StreamHelloReply, error)
	grpc.ClientStream
}

type routeDefinitionStreamHelloClient struct {
	grpc.ClientStream
}

func (x *routeDefinitionStreamHelloClient) Recv() (*StreamHelloReply, error) {
	m := new(StreamHelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteDefinitionServer is the server API for RouteDefinition service.
// All implementations must embed UnimplementedRouteDefinitionServer
// for forward compatibility
type RouteDefinitionServer interface {
	StreamHello(*StreamHelloRequest, RouteDefinition_StreamHelloServer) error
	mustEmbedUnimplementedRouteDefinitionServer()
}

// UnimplementedRouteDefinitionServer must be embedded to have forward compatible implementations.
type UnimplementedRouteDefinitionServer struct {
}

func (UnimplementedRouteDefinitionServer) StreamHello(*StreamHelloRequest, RouteDefinition_StreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHello not implemented")
}
func (UnimplementedRouteDefinitionServer) mustEmbedUnimplementedRouteDefinitionServer() {}

// UnsafeRouteDefinitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteDefinitionServer will
// result in compilation errors.
type UnsafeRouteDefinitionServer interface {
	mustEmbedUnimplementedRouteDefinitionServer()
}

func RegisterRouteDefinitionServer(s grpc.ServiceRegistrar, srv RouteDefinitionServer) {
	s.RegisterService(&RouteDefinition_ServiceDesc, srv)
}

func _RouteDefinition_StreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamHelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteDefinitionServer).StreamHello(m, &routeDefinitionStreamHelloServer{stream})
}

type RouteDefinition_StreamHelloServer interface {
	Send(*StreamHelloReply) error
	grpc.ServerStream
}

type routeDefinitionStreamHelloServer struct {
	grpc.ServerStream
}

func (x *routeDefinitionStreamHelloServer) Send(m *StreamHelloReply) error {
	return x.ServerStream.SendMsg(m)
}

// RouteDefinition_ServiceDesc is the grpc.ServiceDesc for RouteDefinition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteDefinition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginService.RouteDefinition",
	HandlerType: (*RouteDefinitionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHello",
			Handler:       _RouteDefinition_StreamHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "PluginService.proto",
}
